#!perl

# AUTHORITY
# DATE
# DIST
# VERSION

use 5.010001;
use strict;
use warnings;
use Perinci::CmdLine::Any;

our %SPEC;

my $secs_re = qr/[+-]?\d+(?:\.\d*)?/;
my $hms_re = qr/\d\d?:\d\d?:\d\d?(?:,\d{1,3})?/;
my $hms_re_catch = qr/(\d\d?):(\d\d?):(\d\d?)(?:,(\d{1,3}))?/;
sub hms2secs { local $_=shift; /^$hms_re_catch$/ or return; $1*3600+$2*60+$3+$4*0.001 }
sub secs2hms { local $_=shift; /^$secs_re$/ or return "00:00:00,000"; my $ms=1000*($_-int($_)); $_=int($_); my $s=$_%60; $_-=$s; $_/=60; my $m=$_%60; $_-=$m; $_/=60; sprintf "%02d:%02d:%02d,%03d",$_,$m,$s,$ms }

$SPEC{app} = {
    v => 1.1,
    summary => 'Split .srt by duration',
    args => {
        input_file => {
            schema =>  'filename*',
            default => '-',
            pos => 0,
        },
        every => {
            schema => 'duration*',
            req => 1,
            pos => 1,
        },
        num_parts => {
            schema => 'posint*',
            cmdline_aliases => {n=>{}},
        },
    },
};
sub app {
    require POSIX;

    my %args = @_;
    my $input_file = $args{input_file};
    my $num_parts  = $args{num_parts};
    my $part_dur = $args{every};
    $part_dur > 0 or return [400, "Please specify a non-zero --every"];

    require File::Slurper::Dash;
    my $content = File::Slurper::Dash::read_text($input_file);

    my $fmt = !defined($num_parts) ? "%d" :
        $num_parts >= 1000 ? "%04d" : $num_parts >= 100 ? "%03d" : $num_parts >= 10 ? "%02d" : "%d";

    my $fh;
    my $part = 1;
    my $code_set_output_file = sub {
        my $output_file = $input_file;
        my $part_label = defined $num_parts ? sprintf("${fmt}of%d", $part, $num_parts) : sprintf("$fmt", $part);
        if ($output_file =~ /\.\w+\z/) { $output_file =~ s/(\.\w+)\z/.$part_label$1/ } else { $output_file .= ".$part_label" }
        open $fh, ">", $output_file or die "Can't open $output_file: $!";
    };
    $code_set_output_file->();

    my $para = "";
    my $linum = 0;
    my $num_offset = 0;
    for my $line (split /^/m, $content) {
        $linum++;
	if ($line =~ /\S/) {
            $line =~ s/\015//g;
            $para .= $line;
        } elsif ($para =~ /\S/) {
            my ($num, $hms1, $hms2, $text) = $para =~ /(\d+)\n($hms_re) ---?> ($hms_re)(?:\s*X1:\d+\s+X2:\d+\s+Y1:\d+\s+Y2:\d+\s*)?\n(.+)/s or
                return [400, "Invalid entry in line $linum of '$input_file': $para"];
            my $secs1 = hms2secs($hms1);
            my $secs2 = hms2secs($hms2);
            if ($secs1 >= $part*$part_dur) {
                $part++;
                $code_set_output_file->();
                $num_offset = $num-1;
            }
            $secs1 -= ($part-1)*$part_dur;
            $secs2 -= ($part-1)*$part_dur;
            $num -= $num_offset;
            print $fh $num, "\n",
                secs2hms($secs1), " --> ", secs2hms($secs2), "\n",
                $text, "\n";
            $para = "";
	} else {
            $para = "";
	}
    }

    [200];
}

Perinci::CmdLine::Any->new(
    url => '/main/app',
)->run;

# ABSTRACT:
# PODNAME:

=head1 SYNOPSIS

 % srtsplit <input_srt> <every> [options]...

Examples:

 % srtsplit long.srt --every 15min

Assuming `long.srt` contains subtitle for duration of 1h12min, this will produce:

 long.1.srt
 long.2.srt
 long.3.srt
 long.4.srt
 long.5.srt

Specify number of parts:

 % srtsplit long.srt --every 15min --num-parts 5

will produce:

 long.1of5.srt
 long.2of5.srt
 long.3of5.srt
 long.4of5.srt
 long.5of5.srt


=head1 SEE ALSO

L<split-video-by-duration>

=cut
